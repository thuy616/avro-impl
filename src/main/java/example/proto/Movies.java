/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package example.proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Movies extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4016127319421799661L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Movies\",\"namespace\":\"example.proto\",\"fields\":[{\"name\":\"movies\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Movie\",\"fields\":[{\"name\":\"adult\",\"type\":\"boolean\"},{\"name\":\"backdrop_path\",\"type\":\"string\"},{\"name\":\"belongs_to_collection\",\"type\":{\"type\":\"record\",\"name\":\"Collection\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"poster_path\",\"type\":\"string\"},{\"name\":\"backdrop_path\",\"type\":\"string\"}]}},{\"name\":\"budget\",\"type\":\"long\"},{\"name\":\"genres\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Genre\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"}]}}},{\"name\":\"homepage\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"imdb_id\",\"type\":\"string\"},{\"name\":\"original_language\",\"type\":\"string\"},{\"name\":\"original_title\",\"type\":\"string\"},{\"name\":\"overview\",\"type\":\"string\"},{\"name\":\"popularity\",\"type\":\"double\"},{\"name\":\"poster_path\",\"type\":\"string\"},{\"name\":\"production_companies\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProductionCompany\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"int\"}]}}},{\"name\":\"production_countries\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProductionCountry\",\"fields\":[{\"name\":\"iso_3166_1\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}]}}},{\"name\":\"release_date\",\"type\":\"string\"},{\"name\":\"revenue\",\"type\":\"long\"},{\"name\":\"runtime\",\"type\":\"int\"},{\"name\":\"spoken_languages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SpokenLanguage\",\"fields\":[{\"name\":\"iso_639_1\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}]}}},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"tagline\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"video\",\"type\":\"boolean\"},{\"name\":\"vote_average\",\"type\":\"double\"},{\"name\":\"vote_count\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<example.proto.Movie> movies;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Movies() {}

  /**
   * All-args constructor.
   */
  public Movies(java.util.List<example.proto.Movie> movies) {
    this.movies = movies;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return movies;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: movies = (java.util.List<example.proto.Movie>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'movies' field.
   */
  public java.util.List<example.proto.Movie> getMovies() {
    return movies;
  }

  /**
   * Sets the value of the 'movies' field.
   * @param value the value to set.
   */
  public void setMovies(java.util.List<example.proto.Movie> value) {
    this.movies = value;
  }

  /**
   * Creates a new Movies RecordBuilder.
   * @return A new Movies RecordBuilder
   */
  public static example.proto.Movies.Builder newBuilder() {
    return new example.proto.Movies.Builder();
  }
  
  /**
   * Creates a new Movies RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Movies RecordBuilder
   */
  public static example.proto.Movies.Builder newBuilder(example.proto.Movies.Builder other) {
    return new example.proto.Movies.Builder(other);
  }
  
  /**
   * Creates a new Movies RecordBuilder by copying an existing Movies instance.
   * @param other The existing instance to copy.
   * @return A new Movies RecordBuilder
   */
  public static example.proto.Movies.Builder newBuilder(example.proto.Movies other) {
    return new example.proto.Movies.Builder(other);
  }
  
  /**
   * RecordBuilder for Movies instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Movies>
    implements org.apache.avro.data.RecordBuilder<Movies> {

    private java.util.List<example.proto.Movie> movies;

    /** Creates a new Builder */
    private Builder() {
      super(example.proto.Movies.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.proto.Movies.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.movies)) {
        this.movies = data().deepCopy(fields()[0].schema(), other.movies);
        fieldSetFlags()[0] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Movies instance
     * @param other The existing instance to copy.
     */
    private Builder(example.proto.Movies other) {
            super(example.proto.Movies.SCHEMA$);
      if (isValidValue(fields()[0], other.movies)) {
        this.movies = data().deepCopy(fields()[0].schema(), other.movies);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'movies' field.
      * @return The value.
      */
    public java.util.List<example.proto.Movie> getMovies() {
      return movies;
    }

    /**
      * Sets the value of the 'movies' field.
      * @param value The value of 'movies'.
      * @return This builder.
      */
    public example.proto.Movies.Builder setMovies(java.util.List<example.proto.Movie> value) {
      validate(fields()[0], value);
      this.movies = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'movies' field has been set.
      * @return True if the 'movies' field has been set, false otherwise.
      */
    public boolean hasMovies() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'movies' field.
      * @return This builder.
      */
    public example.proto.Movies.Builder clearMovies() {
      movies = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public Movies build() {
      try {
        Movies record = new Movies();
        record.movies = fieldSetFlags()[0] ? this.movies : (java.util.List<example.proto.Movie>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
